{"title":"","author":"jdotpz","content":"# Work Hard So You Don't Have to Work So Hard\nOne thing I'm not a very big fan of:  *work*\n\nI'm actually quite lazy (shockingly, at times).  When I came from the Obama 2012 DevOps team, I brought with me a lot of the ideas we used to work super hard for super long.  \n\n## I also brought with me a disdain for many of the things that kept me awake at night.\n\n* Manually building debian packages on one server, and manually fab kicking all these autoscale groups, then  \n\n* syncing S3 and puppet repos by hand(well, with fabric...we weren't cavepeople)\n\n* verifying versions went out and healthchecks were good \n\n* Marking the deploy in New Relic\n\n* Fetch and parse logs for developers.\n\n* Send error messages or forwarded alerts to developers.\n\n## So far, I'm happy to report that I'm sleeping as well as ever (which still isn't particularly well)\n\n* We've long had a Jenkins server which would\n\n  * Accept a devs github tag they just pushed up to the app repo as input from the developer\n\n  * Clone the repo, checkout the specified tag\n  \n  * Build the package and submodules (pip install requirements or npm install, usually)\n  \n  * Make a debian package out of the results\n  \n  * Include that package in the staging or prod repo, depending on the push\n  \n  * Sync the repo up to S3 and/or the puppet server (5-10 min step!)\n  \n  * Kick puppet on all nodes in the applicable autoscale group (say, thimble-staging)\n\n  * Check the results to make sure servers took the new version and were healthy\n  \n  * Mark the deployment in New Relic to generate a change report\n\nPackages building and deploying to staging took ~5-8 minutes, and packages pushing to prod averaged ~4-5 minutes each.\n\n\n## My Developers are now spoiled, and want it *even* faster :P\n\nThis week, I set out to tweak up this setup a bit and make my friends lives easier.  \n\n* First, I (on the good advice of [Jbuck](https://twitter.com/jbuckca) ) replaced my s3cmd sync process with [deb-s3](https://github.com/krobertson/deb-s3).  This does a much faster job of things, only uploading known edited files to our S3-based staging/prod apt repos.  We went from ~5 minute syncs to apt repos to ~7 second syncs of new packages to the S3 repos.\n\n* This brought average times for staging builds down to ~3.5-4 minutes, and ~2.5 minutes for production pushes.  **Based on 2000 pushes per year and ~5 minutes per push saved, we saved a total of one week full of 24-hour days**.\n\n* Since I can now build much more without getting hung up and stacking on that s3cmd sync, I figured it was time:  **Setup fully automated pushes to staging**\n\n  * I edited my build scripts to look for the latest tag if a tag wasn't supplied in the input.  For production, I double verify by grepping for the expected package string\n\n  * I removed all my Staging Jenkins jobs Parameter option (since my post-receive url didn't play nice with the buildWithParameters options)\n\n  * In each staging repo that deploys through Jenkins, I setup a Hook in Github via Settings -> Webhooks and Services --> Click *Add Webhook*\n\n  * I filled in my bits like this:  \n\n    * Payload: https://mylogging.server.com/job/app-jobname/build?token=somethingorother\n    * Content Type: x-www-form-urlencoded\n    * Secret blank\n    * I select \"Let me Pick individual events\" : I only have 'Release' checked, since I want to build off of tags\n    * I add that webhook\n    * I edit Jenkins job for whichever app, and in the git plugin options under *Build Triggers* I select 'Trigger builds remotely' and then fill in my desired token (somethingorother in the Payload line there)\n\n* I also cranked up my executors, since we'll have fewer processes stacking up behind s3cmd sync\n\n## END RESULT\n\nNow, anytime a developer pushes a github annotated tag to the mozilla branch, Jenkins will have it deployed to staging within about five minutes max.  They won't even need to login to Jenkins to do it.\n\ngit tag -a v1.2.3 -m \"Annotated tags rule, like this version going to staging automatically\"; git push --tags\n\n# >BOOM<\n\nIt is such the lazy persons deployment flow.  It is perfect.","tags":["no tags yet"],"published":1403072322833,"updated":1403072383954}
